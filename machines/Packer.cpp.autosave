#include <machines/Oven.h>
#include <machines/machines.h>
#include <QRandomGenerator>
#include <factory_structs/CookiePack.h>
#include <factory_structs/Inspectores.h>
#include <factory_structs/DepositPacks.h>
#include <factory_structs/Transportadores.h>
#include <factory_structs/BandasTransportadoras.h>


//Contructor
Packer::Packer(Planner * _planner, int capacidadBanda, Transportadores * _transportadores){
    recibidas = 0;
    isRunning = false;
    transportadores = _transportadores;
    planner = _planner;

    bandaEntrada = new BandasTransportadoras<int>(capacidadBanda);
    listaGalletas =  new LinkedList<DepositPacks*>();
}

//Funcion que recibe las galletas
void Packer::receive(int received){
    recibidas += received;
}

//Agregar las galletas
void Packer::agregarPaquete(){
    for (int i=0; i<listaGalletas->length;i++){
        string _name = planner->packs->get(i)->getName();
        int total = planner->packs->get(i)->pack->amountCookies;
        int paquetesTotales =planner->packs->get(i)->amountPacks;
        int _delay = 5;
        listaGalletas->add(new DepositPacks(_name, total, _delay, paquetesTotales));
    }
}

//Cambiar tiempo de empaque de las galletas
void Packer:: cambiarDelay(string _name, int newTime){
    for (int i=0; i<listaGalletas->length;i++){
        if (listaGalletas->get(i)->nombre == _name){
            listaGalletas->get(i)->tiempo = newTime;
        }
    }
}

void Packer::addCookies(string name, int num){
    for (int i=0; i<listaGalletas->length;i++){
        if (listaGalletas->get(i)->nombre == name){
            listaGalletas->get(i)->agregarGalletas(num);
        }
        if (listaGalletas->get(i)->isFinished() and (listaGalletas->get(i)->actual)>0){
            recibidas += listaGalletas->get(i)->actual;
            listaGalletas->get(i)->actual = 0;
        }
    }
}

void Packer::generarRandom(){
    int probs[listaGalletas->length];
    int divisor = 100/listaGalletas->length ;
    for (int i =0;i<listaGalletas->length;i++){
        probs[i]= QRandomGenerator::global()->bounded(0,divisor);
        listaGalletas->get(i)->probabilidad = probs[i];
        if (i == listaGalletas->length-1){
            int j = 0;
            while (j<listaGalletas->length-1){
                probs[listaGalletas->length-1] += listaGalletas->get(j)->probabilidad;
                j++;
            }
            listaGalletas->get(i)->probabilidad =100 - probs[i];
        }
    }
}

int Packer::escogerRandom(){
    int random = QRandomGenerator::global()->bounded(1,100);
    int sumatoria =0;
    sumatoria += listaGalletas->get(0)->probabilidad;
    if (random>0 and random<=listaGalletas->get(0)->probabilidad){       
        return 0;
    }
    else{
        for(int i=1; i<listaGalletas->length;i++){
            if ((random>sumatoria+1) and (random<=(listaGalletas->get(i)->probabilidad+sumatoria))){
                sumatoria += listaGalletas->get(i)->probabilidad;
                return i;
            }
        }
    }
}

//Enviar al transporte
void Packer::send(){
    generarRandom();
    for (int i =0;listaGalletas->length;i++){
        //listaGalletas->get(i)->
    }
}

void Packer::restarPacks(int ind){
    if (ind>0 and ind<listaGalletas->length){
        listaGalletas->get(ind)->paquetesActuales -=1;
        listaGalletas->get(ind)->totalPaquetes -=1;        
    }
}

